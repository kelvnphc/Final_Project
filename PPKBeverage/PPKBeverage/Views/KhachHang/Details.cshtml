@model PPKBeverage.Models.SanPham
@using Microsoft.AspNetCore.Http

@* Access the HttpContext object *@

@{
    ViewData["Title"] = "Details";
    Layout = "_NewLayout";
}
@{
    var maKh = ViewBag.MaKh;
}

@if (maKh == null)
{
    <p>Khách hàng không tồn tại trong session.</p>
}


<h1 class="text-center mt-3 mb-4">CHI TIẾT SẢN PHẨM</h1>

<div class="container mt-5">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0">Thông tin sản phẩm</h4>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">Ảnh</dt>
                <dd class="col-sm-9">
                    <img src="@Html.DisplayFor(model => model.Anh)" class="img-fluid rounded" alt="Ảnh sản phẩm" />
                </dd>
                <dt class="col-sm-3">Mã sản phẩm</dt>
                <dd class="col-sm-9">@Html.DisplayFor(model => model.Id)</dd>
                <dt class="col-sm-3">Tên sản phẩm</dt>
                <dd class="col-sm-9">@Html.DisplayFor(model => model.Ten)</dd>
                <dt class="col-sm-3">Miêu tả</dt>
                <dd class="col-sm-9">@Html.DisplayFor(model => model.MieuTa)</dd>
                <dt class="col-sm-3">Size</dt>
                <dd class="col-sm-9">@Html.DisplayFor(model => model.Size.Ten)</dd>
                <dt class="col-sm-3">Giá tiền</dt>
                <dd class="col-sm-9">@Html.DisplayFor(model => model.Tien)</dd>
            </dl>
        </div>
        <div class="card-footer">
            <form asp-action="Delete" class="float-right">
                <button type="submit" class="btn btn-danger">Xóa</button>
            </form>
            <a asp-action="ListBeverage" class="btn btn-secondary">Trở về danh sách</a>
        </div>
        <div class="comments-section mt-4">
            <h5 class="mb-3">Bình luận</h5>
            <div id="comments-list">
                @if (Model.BinhLuans != null && Model.BinhLuans.Any())
                {
                    foreach (var comment in Model.BinhLuans)
                    {
                        // Xác định màu sắc và biểu tượng dựa trên Sentiment
                        string sentimentClass = comment.Sentiment switch
                        {
                            1 => "positive", // Màu xanh
                            0 => "neutral",  // Màu vàng
                            -1 => "negative", // Màu đỏ
                            _ => "neutral"   // Mặc định là màu vàng nếu không xác định
                        };

                        string emoji = comment.Sentiment switch
                        {
                            1 => "😄", // Emoji cười
                            0 => "😐", // Emoji không cảm xúc
                            -1 => "😢", // Emoji không vui
                            _ => "😐"   // Mặc định là không cảm xúc
                        };

                        string borderColor = comment.Sentiment switch
                        {
                            1 => "green", // Màu xanh
                            0 => "gold",  // Màu vàng
                            -1 => "red",  // Màu đỏ
                            _ => "gold"   // Mặc định là vàng
                        };

                        string backgroundColor = comment.Sentiment switch
                        {
                            1 => "#e0ffe0", // Màu nền xanh nhạt
                            0 => "#fff5d9", // Màu nền vàng nhạt
                            -1 => "#ffe0e0", // Màu nền đỏ nhạt
                            _ => "#fff5d9"   // Mặc định là vàng
                        };

                        <div class="comment-item" style="border: 2px solid @borderColor; background-color: @backgroundColor;">
                            <div class="comment-header">
                                <div class="comment-user-info">
                                    <strong>@comment.KhachHang.HoKh @comment.KhachHang.TenKh</strong>
                                    <span class="comment-date">@(comment.NgayTao.HasValue ? comment.NgayTao.Value.ToString("dd/MM/yyyy") : "Chưa có ngày tạo")</span>
                                </div>
                            </div>
                            <div class="comment-body">
                                <p>@emoji @comment.NoiDung</p>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>Chưa có bình luận nào.</p>
                }
            </div>

            <form id="commentForm" method="post" class="mt-3">
                <div class="form-group">
                    <label for="NoiDung">Nội dung bình luận:</label>
                    <textarea id="NoiDung" name="NoiDung" class="form-control" rows="4" required></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Gửi bình luận</button>
            </form>
        </div>
    </div>
</div>
<script src="https://www.gstatic.com/dialogflow-console/fast/messenger/bootstrap.js?v=1"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
    $(document).ready(function () {
        var maKh = parseInt('@ViewBag.MaKh');
        var SanPhamId = parseInt('@ViewBag.SanPhamId');
        var tenKhachHang = '@ViewBag.TenKhachHang'; // Lấy tên khách hàng từ ViewBag

        // Hàm gọi API
        async function query(data, retries = 5, delay = 2000) {
            try {
                const response = await fetch(
                    "https://api-inference.huggingface.co/models/wonrax/phobert-base-vietnamese-sentiment",
                    {
                        headers: {
                            Authorization: "Bearer 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",
                            "Content-Type": "application/json",
                        },
                        method: "POST",
                        body: JSON.stringify(data),
                    }
                );

                if (!response.ok) {
                    // Nếu phản hồi không ổn (không phải 2xx)
                    const errorResponse = await response.json();
                    console.error("Error fetching data from API:", errorResponse);
                    throw new Error(errorResponse.error || "Unknown error");
                }

                const result = await response.json();
                return result;

            } catch (error) {
                if (retries > 0) {
                    console.warn(`Retrying... Attempts left: ${retries}`);
                    await new Promise(res => setTimeout(res, delay)); // Delay trước khi thử lại
                    return query(data, retries - 1, delay); // Thử lại
                } else {
                    console.error("Max retries reached. Unable to fetch data.");
                    throw error; // Ném lỗi nếu không còn lần thử nào
                }
            }
        }

        // Sự kiện submit form - thêm async để dùng await bên trong
        $('#commentForm').submit(async function (event) {
            event.preventDefault();
            var noiDung = $('#NoiDung').val();
            console.log(noiDung);
            var dataToAnalyze = {
                inputs: noiDung,
            };

            try {

                // Gọi API và chờ kết quả
                const response = await query(dataToAnalyze);
                console.log(response);

                // Kiểm tra nếu response là một mảng và phần tử đầu tiên cũng là một mảng
                const scores = response && response[0] && response[0][0] ? response[0] : [];

                // Tìm nhãn có điểm cao nhất
                let posScore = 0, negScore = 0;
                scores.forEach((item) => {
                    if (item.label === "POS") posScore = item.score;
                    else if (item.label === "NEU") neuScore = item.score;
                    else if (item.label === "NEG") negScore = item.score;
                });
                // Xác định nhãn chiếm ưu thế
                let sentiment = 0;
                if (posScore > neuScore && posScore > negScore) {
                    sentiment = 1;
                } else if (neuScore > posScore && neuScore > negScore) {
                    sentiment = 0;
                } else if (negScore > posScore && negScore > neuScore) {
                    sentiment = -1;
                } else {
                    sentiment = 0; // Có thể có trường hợp không rõ ràng
                }
                console.log(`Dominant sentiment: ${sentiment}`);

                var dataToSend = {
                    NoiDung: $('#NoiDung').val(),
                    KhachHangId: maKh,
                    SanPhamId: SanPhamId,
                    Sentiment: sentiment
                };

                // Gửi dữ liệu đến server
                $.ajax({
                    url: 'https://localhost:44396/AddComment',
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify(dataToSend),
                    success: function (response) {
                        var newComment = `
                                    <div class="comment-item">
                                        <div class="comment-header">
                                            <div class="comment-user-info">
                                                <strong>${tenKhachHang}</strong>
                                                <span class="comment-date">Hôm nay</span>
                                            </div>
                                        </div>
                                        <div class="comment-body">
                                            <p>${dataToSend.NoiDung}</p>
                                        </div>
                                    </div>`;

                        // Thêm comment mới vào danh sách
                        $('#comments-list').prepend(newComment).hide().fadeIn(500);
                        $('#NoiDung').val('');
                        alert(response.message);
                        window.location.reload(); // tải lại trang
                    },
                    error: function (xhr, status, error) {
                        alert("Error adding comment");
                    }
                });
            } catch (error) {
                console.error("Error fetching data from API:", error);
                alert("Error processing the comment");
            }
        });
    });
</script>


<df-messenger intent="WELCOME"
              chat-title="CSKH-PPK-Coffee"
              agent-id="66dfadc2-e7dc-4761-9ada-f796b9eabad2"
              language-code="vi"></df-messenger>
<style>
    .comments-section {
        background-color: #ffffff;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .comment-item {
        display: flex;
        margin-bottom: 15px;
        padding: 10px;
        border-bottom: 1px solid #eee;
    }

    .comment-header {
        display: flex;
        align-items: center;
        margin-right: 10px;
    }

    .comment-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        margin-right: 10px;
    }

    .comment-user-info {
        display: flex;
        flex-direction: column;
    }

        .comment-user-info strong {
            color: #333;
            font-size: 14px;
        }

    .comment-date {
        font-size: 12px;
        color: #999;
    }

    .comment-body {
        flex-grow: 1;
    }

        .comment-body p {
            margin: 0;
            color: #555;
            font-size: 14px;
        }

    #commentForm .form-group {
        margin-top: 20px;
    }

    body {
        background-color: #f8f9fa;
        color: #343a40;
        font-family: 'Arial', sans-serif;
    }

    .container {
        max-width: 800px;
    }

    .card {
        border: none;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }

    .card-header {
        background-color: #007bff;
        border-radius: 0.25rem 0.25rem 0 0;
    }

    .card-footer {
        background-color: #f8f9fa;
        border-top: none;
    }

        .card-footer .btn {
            margin-top: 10px;
        }
</style>
